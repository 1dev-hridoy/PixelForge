<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PixelForge - Profile</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Ubuntu+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'mono': ['Ubuntu Mono', 'monospace'],
                    }
                }
            }
        }
    </script>
</head>
<body class="bg-gray-100 font-mono text-gray-800 min-h-screen">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b fixed top-0 left-0 right-0 z-20">
        <div class="max-w-7xl mx-auto px-6 py-4 flex items-center justify-between">
            <div class="flex items-center space-x-2">
                <div class="w-8 h-8 bg-black text-white flex items-center justify-center font-bold text-lg">P</div>
                <div>
                    <h1 class="text-lg font-bold text-black">PixelForge</h1>
                    <p class="text-xs text-gray-500">crafting digital experiences</p>
                </div>
            </div>
            <div class="flex space-x-4">
                <a href="/" class="text-blue-600 hover:underline">Home</a>
                <a href="/doc" class="text-blue-600 hover:underline">API Docs</a>
                <% if (user) { %>
                    <a href="#" onclick="handleLogout(event)" class="text-red-600 hover:underline">Logout</a>
                <% } else { %>
                    <a href="/auth" class="text-blue-600 hover:underline">Sign In</a>
                <% } %>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="pt-20 max-w-md mx-auto px-6 py-12">
        <% if (user) { %>
        <!-- AUTHENTICATED USER PROFILE -->
        <div class="text-center mb-8">
            <div class="w-16 h-16 bg-black text-white flex items-center justify-center font-bold text-2xl mx-auto mb-4">P</div>
            <h2 class="text-2xl font-bold mb-2">Welcome back, <%= user.name %>!</h2>
            <p class="text-gray-600">Manage your account settings</p>
        </div>

        <!-- Profile Card -->
        <div class="bg-white border border-gray-300 rounded-lg p-6 mb-6">
            <!-- User Avatar and Basic Info -->
            <div class="flex flex-col items-center mb-6">
                <div class="w-24 h-24 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center mb-4">
                    <span class="text-3xl font-bold text-white"><%= user.name.charAt(0).toUpperCase() %></span>
                </div>
                <h3 class="text-xl font-bold mb-1"><%= user.name %></h3>
                <p class="text-gray-600"><%= user.email %></p>
                <div class="flex items-center mt-2">
                    <span class="px-2 py-1 text-xs font-semibold rounded-full 
                        <% if (user.accountType === 'premium') { %>bg-green-100 text-green-800<% } else { %>bg-blue-100 text-blue-800<% } %>">
                        <%= user.accountType.toUpperCase() %>
                    </span>
                </div>
            </div>

            <!-- API Key Section -->
            <div class="mb-6">
                <h4 class="font-bold mb-3 flex items-center">
                    <i class="fas fa-key mr-2 text-gray-500"></i>
                    API Key
                </h4>
                <div class="bg-gray-50 border border-gray-300 rounded p-3 flex items-center justify-between">
                    <span id="apiKeyDisplay" class="text-sm font-mono break-all"><%= user.apiKey %></span>
                    <button id="copyButton" class="ml-2 p-2 hover:bg-gray-200 rounded-full transition-colors" onclick="copyApiKey()" title="Copy API Key">
                        <span class="material-icons text-gray-600">content_copy</span>
                    </button>
                </div>
                <div class="flex space-x-2 mt-2">
                    <button onclick="regenerateApiKey()" class="text-xs bg-orange-100 text-orange-800 px-3 py-1 rounded hover:bg-orange-200 transition-colors">
                        <i class="fas fa-sync-alt mr-1"></i>Regenerate
                    </button>
                    <button onclick="toggleApiKeyVisibility()" class="text-xs bg-gray-100 text-gray-800 px-3 py-1 rounded hover:bg-gray-200 transition-colors">
                        <i class="fas fa-eye mr-1" id="eyeIcon"></i>
                        <span id="keyVisibilityText">Hide</span>
                    </button>
                </div>
                <p class="text-xs text-gray-500 mt-2">Use this key in <code class="font-mono bg-gray-200 px-1 rounded">X-API-Key</code> header. Keep it secret!</p>
            </div>

            <!-- Usage Statistics -->
            <div class="mb-6">
                <h4 class="font-bold mb-3 flex items-center">
                    <i class="fas fa-chart-line mr-2 text-gray-500"></i>
                    Usage Statistics
                </h4>
                <div class="grid grid-cols-2 gap-4 mb-4">
                    <div class="bg-gray-50 p-3 rounded">
                        <div class="text-2xl font-bold text-blue-600">
                            <% if (user.usageStats && user.usageStats.totalRequests !== undefined) { %>
                                <%= user.usageStats.totalRequests %>
                            <% } else { %>
                                0
                            <% } %>
                        </div>
                        <div class="text-xs text-gray-500">Total Requests</div>
                    </div>
                    <div class="bg-gray-50 p-3 rounded">
                        <div class="text-2xl font-bold text-green-600">
                            <% if (user.usageStats && user.usageStats.dailyRequests !== undefined) { %>
                                <%= user.usageStats.dailyRequests %>
                            <% } else { %>
                                0
                            <% } %>
                        </div>
                        <div class="text-xs text-gray-500">Today's Requests</div>
                    </div>
                </div>
                <div class="text-xs text-gray-500 mb-3">
                    <div class="flex justify-between mb-1">
                        <span>Minute Limit:</span>
                        <span class="font-mono">
                            <span id="minuteUsed">
                                <% if (user.usageStats && user.usageStats.minuteWindows) { %>
                                    <%= user.usageStats.minuteWindows.filter(w => new Date(w.windowStart) > new Date(Date.now() - 60000)).reduce((sum, w) => sum + (w.requestCount || 0), 0) %>
                                <% } else { %>
                                    0
                                <% } %>
                            </span>/
                            <%= settings.rateLimit[user.accountType].requestsPerMinute %>
                        </span>
                    </div>
                    <div class="flex justify-between">
                        <span>Daily Limit:</span>
                        <span class="font-mono">
                            <span id="dailyUsed">
                                <% if (user.usageStats && user.usageStats.dailyRequests !== undefined) { %>
                                    <%= user.usageStats.dailyRequests %>
                                <% } else { %>
                                    0
                                <% } %>
                            </span>/
                            <%= settings.rateLimit[user.accountType].requestsPerDay %>
                        </span>
                    </div>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                    <div class="bg-blue-600 h-2 rounded-full transition-all duration-300" 
                         style="width: <% if (user.usageStats && user.usageStats.dailyRequests !== undefined && settings.rateLimit[user.accountType].requestsPerDay) { %><%= Math.min((user.usageStats.dailyRequests / settings.rateLimit[user.accountType].requestsPerDay) * 100, 100) %><% } else { %>0<% } %>%"></div>
                </div>
            </div>

            <!-- Account Stats -->
            <div class="grid grid-cols-3 gap-4 mb-6">
                <div class="text-center p-3 bg-gray-50 rounded">
                    <div class="text-lg font-bold text-blue-600">
                        <% if (user.usageStats && user.usageStats.monthlyRequests !== undefined) { %>
                            <%= user.usageStats.monthlyRequests %>
                        <% } else { %>
                            0
                        <% } %>
                    </div>
                    <div class="text-xs text-gray-500">This Month</div>
                </div>
                <div class="text-center p-3 bg-gray-50 rounded">
                    <div class="text-lg font-bold text-purple-600">
                        <% if (user.usageStats && user.usageStats.dailyRequests !== undefined) { %>
                            <%= settings.rateLimit[user.accountType].requestsPerDay - user.usageStats.dailyRequests %>
                        <% } else { %>
                            <%= settings.rateLimit[user.accountType].requestsPerDay %>
                        <% } %>
                    </div>
                    <div class="text-xs text-gray-500">Daily Remaining</div>
                </div>
                <div class="text-center p-3 bg-gray-50 rounded">
                    <div class="text-lg font-bold text-green-600">
                        <% if (user.usageStats && user.usageStats.minuteWindows) { %>
                            <%= settings.rateLimit[user.accountType].requestsPerMinute - user.usageStats.minuteWindows.filter(w => new Date(w.windowStart) > new Date(Date.now() - 60000)).reduce((sum, w) => sum + (w.requestCount || 0), 0) %>
                        <% } else { %>
                            <%= settings.rateLimit[user.accountType].requestsPerMinute %>
                        <% } %>
                    </div>
                    <div class="text-xs text-gray-500">Minute Remaining</div>
                </div>
            </div>

            <!-- Account Details -->
            <div class="mb-6">
                <h4 class="font-bold mb-3 flex items-center">
                    <i class="fas fa-info-circle mr-2 text-gray-500"></i>
                    Account Details
                </h4>
                <div class="space-y-3 text-sm">
                    <div class="flex justify-between items-center py-2 border-b border-gray-100">
                        <span class="text-gray-600">Member Since</span>
                        <span class="font-mono text-gray-800">
                            <%= new Date(user.createdAt).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %>
                        </span>
                    </div>
                    <div class="flex justify-between items-center py-2 border-b border-gray-100">
                        <span class="text-gray-600">Account Type</span>
                        <span class="font-semibold <% if (user.accountType === 'premium') { %>text-green-600<% } else { %>text-blue-600<% } %>">
                            <%= user.accountType.toUpperCase() %>
                        </span>
                    </div>
                    <div class="flex justify-between items-center py-2 border-b border-gray-100">
                        <span class="text-gray-600">Rate Limits</span>
                        <span class="font-mono text-gray-800">
                            <%= settings.rateLimit[user.accountType].requestsPerMinute %>/min • <%= settings.rateLimit[user.accountType].requestsPerDay %>/day
                        </span>
                    </div>
                    <div class="flex justify-between items-center py-2">
                        <span class="text-gray-600">Next Reset</span>
                        <span class="font-mono text-gray-800">
                            <%= new Date(new Date().setHours(0,0,0,0) + 24*60*60*1000).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' }) %>
                        </span>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="space-y-3">
                <% if (user.isAdmin) { %>
                <a href="/admin" target="_blank" class="w-full bg-red-600 text-white py-3 rounded font-bold hover:bg-red-700 transition-colors flex items-center justify-center">
                    <i class="fas fa-shield-alt mr-2"></i>Admin Panel
                </a>
                <% } %>
                <button onclick="editProfile()" class="w-full bg-blue-600 text-white py-3 rounded font-bold hover:bg-blue-700 transition-colors flex items-center justify-center">
                    <i class="fas fa-edit mr-2"></i>Edit Profile
                </button>
                <% if (user.accountType === 'free') { %>
                <button onclick="upgradePlan()" class="w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white py-3 rounded font-bold hover:from-purple-600 hover:to-pink-600 transition-all flex items-center justify-center">
                    <i class="fas fa-crown mr-2"></i>Upgrade to Premium
                </button>
                <% } else { %>
                <button class="w-full bg-green-100 text-green-800 py-3 rounded font-bold flex items-center justify-center">
                    <i class="fas fa-check-circle mr-2"></i>Premium Member
                </button>
                <% } %>
            </div>
        </div>

        <!-- Logout Button -->
        <button onclick="handleLogout()" class="w-full bg-white border border-red-300 text-red-600 py-3 rounded font-bold hover:bg-red-50 transition-colors flex items-center justify-center">
            <i class="fas fa-sign-out-alt mr-2"></i>Logout
        </button>

        <% } else { %>
        <!-- UNAUTHENTICATED STATE -->
        <div class="text-center mb-8">
            <div class="w-16 h-16 bg-gray-200 text-gray-500 flex items-center justify-center font-bold text-2xl mx-auto mb-4">
                <i class="fas fa-user-lock"></i>
            </div>
            <h2 class="text-2xl font-bold mb-2 text-gray-700">Profile Access Required</h2>
            <% if (typeof error !== 'undefined' && error) { %>
            <p class="text-red-600 mb-4"><%= error %></p>
            <% } else { %>
            <p class="text-gray-600 mb-4">Sign in to view your profile and API key</p>
            <% } %>
        </div>

        <div class="bg-white border border-gray-300 rounded-lg p-6 mb-6">
            <div class="space-y-4 text-center">
                <div class="text-lg font-semibold text-gray-800 mb-4">What you'll get:</div>
                <div class="grid grid-cols-1 gap-3 mb-6">
                    <div class="flex items-start space-x-3">
                        <i class="fas fa-key mt-1 text-blue-500"></i>
                        <div>
                            <div class="font-medium text-gray-800">Personal API Key</div>
                            <div class="text-sm text-gray-600">Access all endpoints with your unique key</div>
                        </div>
                    </div>
                    <div class="flex items-start space-x-3">
                        <i class="fas fa-chart-line mt-1 text-green-500"></i>
                        <div>
                            <div class="font-medium text-gray-800">Usage Analytics</div>
                            <div class="text-sm text-gray-600">Track your API usage and limits</div>
                        </div>
                    </div>
                    <div class="flex items-start space-x-3">
                        <i class="fas fa-crown mt-1 text-purple-500"></i>
                        <div>
                            <div class="font-medium text-gray-800">Upgrade Options</div>
                            <div class="text-sm text-gray-600">Unlock premium features and higher limits</div>
                        </div>
                    </div>
                </div>
                <button onclick="window.location.href='/auth'" class="w-full bg-black text-white py-3 rounded font-bold hover:bg-gray-800 transition-colors flex items-center justify-center mx-auto">
                    <i class="fas fa-sign-in-alt mr-2"></i>Sign In to Continue
                </button>
                <div class="pt-4 border-t border-gray-200">
                    <p class="text-sm text-gray-600">Don't have an account?</p>
                    <button onclick="window.location.href='/auth'" class="text-blue-600 hover:underline text-sm mt-1">
                        Create Account
                    </button>
                </div>
            </div>
        </div>
        <% } %>

        <!-- Footer -->
        <footer class="text-center text-sm text-gray-500 mt-8">
            <p>© <%= new Date().getFullYear() %> PixelForge. All Rights Reserved.</p>
            <p class="text-xs mt-1">Built with ❤️ by <%= settings.service.ownerName %></p>
        </footer>
    </main>

    <% if (user) { %>
    <!-- Toast Notification -->
    <div id="toast" class="fixed bottom-4 right-4 bg-black text-white px-4 py-2 rounded shadow-lg transform translate-y-20 transition-transform duration-300 z-50">
        <div class="flex items-center">
            <span class="material-icons mr-2">check_circle</span>
            <span id="toastMessage">API key copied to clipboard!</span>
        </div>
    </div>

    <!-- API Key Modal -->
    <div id="apiKeyModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-bold">New API Key Generated</h3>
                <button onclick="closeApiKeyModal()" class="text-gray-500 hover:text-gray-700">
                    <span class="material-icons">close</span>
                </button>
            </div>
            <div class="mb-4">
                <p class="text-sm text-gray-600 mb-4">Your new API key has been generated. <strong>Save this immediately</strong> - you won't see it again:</p>
                <div class="bg-gray-50 border border-gray-300 rounded p-3 flex items-center justify-between mb-3">
                    <span id="newApiKey" class="text-sm font-mono break-all"></span>
                    <button onclick="copyNewApiKey()" class="ml-2 p-2 hover:bg-gray-200 rounded-full">
                        <span class="material-icons text-gray-600">content_copy</span>
                    </button>
                </div>
                <div class="bg-yellow-50 border border-yellow-200 rounded p-3">
                    <div class="flex items-start">
                        <i class="fas fa-exclamation-triangle text-yellow-600 mt-1 mr-2"></i>
                        <div class="text-xs text-yellow-800">
                            <p>This key replaces your old one. Update all your applications immediately.</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="flex space-x-3">
                <button onclick="closeApiKeyModal()" class="flex-1 bg-gray-200 text-gray-800 py-2 rounded hover:bg-gray-300">
                    I've Saved It
                </button>
                <button onclick="copyNewApiKeyAndClose()" class="flex-1 bg-blue-600 text-white py-2 rounded hover:bg-blue-700">
                    Copy & Close
                </button>
            </div>
        </div>
    </div>

    <script>
        const userData = JSON.parse('<%- JSON.stringify(user) %>');
        let currentUser = userData;
        let apiKeyVisible = true;

    
        const usageStats = currentUser.usageStats || { totalRequests: 0, dailyRequests: 0, monthlyRequests: 0, minuteWindows: [] };



        
        function copyApiKey() {
            const apiKey = document.getElementById('apiKeyDisplay').textContent;
            navigator.clipboard.writeText(apiKey).then(() => {
                showToast('API key copied to clipboard!');
                const copyBtn = document.getElementById('copyButton');
                const originalIcon = copyBtn.innerHTML;
                copyBtn.innerHTML = '<span class="material-icons text-green-600">check</span>';
                setTimeout(() => {
                    copyBtn.innerHTML = originalIcon;
                }, 2000);
            }).catch(err => {
                showToast('Failed to copy API key', 'error');
                console.error('Failed to copy: ', err);
            });
        }

        function toggleApiKeyVisibility() {
            const apiKeyDisplay = document.getElementById('apiKeyDisplay');
            const eyeIcon = document.getElementById('eyeIcon');
            const visibilityText = document.getElementById('keyVisibilityText');
            
            if (apiKeyVisible) {
                apiKeyDisplay.textContent = '•'.repeat(currentUser.apiKey.length);
                eyeIcon.className = 'fas fa-eye-slash';
                visibilityText.textContent = 'Show';
                apiKeyVisible = false;
            } else {
                apiKeyDisplay.textContent = currentUser.apiKey;
                eyeIcon.className = 'fas fa-eye';
                visibilityText.textContent = 'Hide';
                apiKeyVisible = true;
            }
        }

        async function regenerateApiKey() {
            if (!confirm('⚠️ Are you sure you want to regenerate your API key?\n\nThis will invalidate ALL existing keys and you\'ll need to update your applications immediately.')) {
                return;
            }

            try {
                showToast('Regenerating API key...', 'info');
                
                const token = localStorage.getItem('pixelForgeToken');
                if (!token) {
                    showToast('Authentication required. Please sign in again.', 'error');
                    window.location.href = '/auth';
                    return;
                }

                const response = await fetch('/api/user/regenerate-key', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    credentials: 'include'
                });

                const result = await response.json();

                if (result.error) {
                    showToast('Failed to regenerate API key: ' + result.error, 'error');
                } else {
                    localStorage.setItem('pixelForgeApiKey', result.result.apiKey);
                    document.getElementById('newApiKey').textContent = result.result.apiKey;
                    document.getElementById('apiKeyModal').classList.remove('hidden');
                    currentUser.apiKey = result.result.apiKey;
                    document.getElementById('apiKeyDisplay').textContent = result.result.apiKey;
                    showToast('New API key generated successfully!', 'success');
                }
            } catch (error) {
                console.error('Regenerate error:', error);
                showToast('Failed to regenerate API key. Please try again.', 'error');
            }
        }

  
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toastMessage');
            const icon = toast.querySelector('.material-icons');
            
            toastMessage.textContent = message;
            
            if (type === 'error') {
                icon.textContent = 'error';
                toast.style.backgroundColor = '#ef4444';
            } else if (type === 'warning') {
                icon.textContent = 'warning';
                toast.style.backgroundColor = '#f59e0b';
            } else if (type === 'info') {
                icon.textContent = 'info';
                toast.style.backgroundColor = '#3b82f6';
            } else {
                icon.textContent = 'check_circle';
                toast.style.backgroundColor = '#000000';
            }
            
            toast.classList.remove('translate-y-20');
            setTimeout(() => {
                toast.classList.add('translate-y-20');
            }, 4000);
        }

        async function editProfile() {
            const newName = prompt('Enter your new name:', currentUser.name);
            if (newName && newName.trim() && newName.trim() !== currentUser.name) {
                const trimmedName = newName.trim();

                try {
                    showToast('Updating profile...', 'info');
                    const token = localStorage.getItem('pixelForgeToken');
                    if (!token) {
                        showToast('Authentication required. Please sign in again.', 'error');
                        window.location.href = '/auth';
                        return;
                    }

                    const response = await fetch('/api/user/update', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify({ name: trimmedName })
                    });

                    const result = await response.json();

                    if (result.error) {
                        showToast('Failed to update profile: ' + result.error, 'error');
                    } else {
                        currentUser.name = trimmedName;
                        document.querySelector('h2.text-2xl').textContent = `Welcome back, ${trimmedName}!`;
                        document.querySelector('h3.text-xl').textContent = trimmedName;
                        document.querySelector('.text-3xl').textContent = trimmedName.charAt(0).toUpperCase();
                        showToast('Profile updated successfully!', 'success');
                    }
                } catch (error) {
                    console.error('Update profile error:', error);
                    showToast('Failed to update profile. Please try again.', 'error');
                }
            }
        }

       
        function upgradePlan() {
            const planDetails = `Upgrade to Premium for $${settings.procingPlan.premium.price}/month\n\nPremium Features:\n${settings.procingPlan.premium.features.join('\n')}\n\nHigher Rate Limits:\n• ${settings.rateLimit.premium.requestsPerMinute}/minute\n• ${settings.rateLimit.premium.requestsPerDay}/day`;
            
            if (confirm(planDetails)) {
                showToast('Redirecting to payment...', 'info');
                setTimeout(() => {
                    alert('Payment integration coming soon!');
                }, 1500);
            }
        }

                    function handleLogout(event) {
            if (event) event.preventDefault();
            if (confirm('Are you sure you want to logout?')) {
                localStorage.removeItem('pixelForgeToken');
                localStorage.removeItem('pixelForgeApiKey');
                document.cookie = 'token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
                showToast('Logging out...', 'info');
                setTimeout(() => {
                    window.location.href = '/auth';
                }, 1500);
            }
        }

      



        function closeApiKeyModal() {
            document.getElementById('apiKeyModal').classList.add('hidden');
        }

        function copyNewApiKey() {
            const newApiKey = document.getElementById('newApiKey').textContent;
            navigator.clipboard.writeText(newApiKey).then(() => {
                showToast('New API key copied to clipboard!', 'success');
            }).catch(err => {
                showToast('Failed to copy new API key', 'error');
                console.error('Copy error:', err);
            });
        }

        function copyNewApiKeyAndClose() {
            copyNewApiKey();
            setTimeout(() => {
                closeApiKeyModal();
            }, 500);
        }

      




        document.addEventListener('DOMContentLoaded', function() {
            console.log('Profile loaded for:', currentUser.name);
        });

        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case 'c':
                        e.preventDefault();
                        copyApiKey();
                        break;
                    case 'r':
                        e.preventDefault();
                        regenerateApiKey();
                        break;
                    case 'e':
                        e.preventDefault();
                        editProfile();
                        break;
                }
            }
        });
    </script>
    <% } %>
</body>
</html>